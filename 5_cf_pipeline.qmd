---
title: "5_cf_pipeline"
format: html
---

A quick pipeline of counterfactuals to explore

```{r}
library(sf)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(raster)
theme_set(theme_minimal())
```

We are selecting only the fires from 2000 onwards. 

```{r}
suppressWarnings({
  fire_origin_sf <- read_sf(
  here::here("data/FIRE"), 
  layer = "FIRE_HISTORY_ORIGIN"
) |>
  filter(FIRE_START >= "2000-01-01", !st_is_empty(geometry))
})

fire_origin_coords <- st_coordinates(fire_origin_sf) |>
  as_tibble() |>
  bind_cols(
    date = fire_origin_sf$FIRE_START,
    cause = fire_origin_sf$CAUSE
  ) |>
  arrange(date)

weather_data <- readRDS("weather_gridded_data.rds")
min_power_dist <- readRDS("min_dist_data.rds")
```

Categorization of causes

1. lightning : 'LIGHTNING'
2. arson: 'DELIBERATE LIGHTING (MALICIOUS)'
3. burning_off_human : 
```
  'BURNING OFF (DEPARTMENTAL PRESCRIBED)',
  'BURNING OFF, STUBBLE, GRASS, SCRUB',
  'BURNING OFF, WINDROW, HEAP',
  'WASTE DISPOSAL, DOMESTIC',
  'WASTE DISPOSAL, INDUSTRIAL, SAWMILL, TIP'
```
4. accidental_human
```
  "CAMPFIRE, BARBEQUE",
  "FIREWORKS",
  "UNATTENDED CAMPFIRE - CONTAINED WITHIN BOUNDARY",
  'BURNING BUILDING',
  'BURNING HOUSE, STOVE, FLUE',
  'BURNING VEHICLE, MACHINE',
  'EXHAUST, CHAINSAW',
  'EXHAUST, OTHER',
  'PIPE, CIGARETTE, MATCH',
  'SNIGGING, HAULING'
  RAILWAY|TRAIN|POWER TRANSMISSION
```
5. relight
```
  'RELIGHT - BURNING OFF',
  'RELIGHT - PRESCRIBED FIRE',
  'RELIGHT - WILDFIRE'
```
6. other : by default and if is na



```{r}
data <- fire_origin_coords %>%
  mutate(new_cause = 'other') %>%
  mutate(new_cause = ifelse(cause == "LIGHTNING", "lightning", new_cause)) %>%
  mutate(new_cause = ifelse(cause == "DELIBERATE LIGHTING (MALICIOUS)", "arson", new_cause)) %>%
  mutate(new_cause = ifelse(cause %in% c('BURNING OFF (DEPARTMENTAL PRESCRIBED)',
                                         'BURNING OFF, STUBBLE, GRASS, SCRUB',
                                         'BURNING OFF, WINDROW, HEAP',
                                         'WASTE DISPOSAL, DOMESTIC',
                                         'WASTE DISPOSAL, INDUSTRIAL, SAWMILL, TIP'), 'burning_off_human', new_cause)) %>%
  mutate(new_cause = ifelse(cause %in% c("CAMPFIRE, BARBEQUE",
                                         "FIREWORKS",
                                         "UNATTENDED CAMPFIRE - CONTAINED WITHIN BOUNDARY",
                                         'BURNING BUILDING',
                                         'BURNING HOUSE, STOVE, FLUE',
                                         'BURNING VEHICLE, MACHINE',
                                         'EXHAUST, CHAINSAW',
                                         'EXHAUST, OTHER',
                                         'PIPE, CIGARETTE, MATCH',
                                         'SNIGGING, HAULING'), "accidental_human", new_cause)) %>%
  mutate(new_cause = ifelse(stringr::str_detect(cause, "RAILWAY|TRAIN|POWER TRANSMISSION"), "accidental_human", new_cause)) %>%
  mutate(new_cause = ifelse(cause %in% c('RELIGHT - BURNING OFF',
                                         'RELIGHT - PRESCRIBED FIRE',
                                         'RELIGHT - WILDFIRE'), 'relight', new_cause)) |>
  replace_na(list(new_cause = 'other')) |> 
  mutate(new_cause = factor(new_cause)) |>
  mutate(
    year = year(date),
    month = month(date),
    day = day(date),
    wod = wday(date)
  ) |>
  mutate(
    year = factor(year),
    month = factor(month, levels = c(1:12)),
    day = factor(day, levels = c(1:31)),
    wod = factor(wod, levels = c(1:7))
  ) |>
  mutate(
    col = round(X, 4),
    row = round(Y, 4)
  ) |> 
  left_join(weather_data |> dplyr::select(col, row, date, air_tmax:rh_tmin_source), by = c("col", "row", "date")) |>
  left_join(min_power_dist, by = c("col", "row")) |>
  # mutate(min_power_dist = min_power_dist / 1000) |> # kilometres
  # mutate(id = row_number(), .before = 1) |>
  # left_join(wt |> dplyr::select(-c(date,year,month,day)), by = "id") |>
  mutate(elev_m = as.numeric(str_replace(elev_m, " m", ""))) |>
  dplyr::select(-cause)
```

We are picking the 80% of the incidents from the first incidents as training data, and leaving the rest as testing data.

```{r}
# split train test
training_indices <- seq(1, ceiling(nrow(data) * 0.8))
model_data <- data |> dplyr::select(
  X, Y,
  year, month, day, wod,
  new_cause, 
  min_dist,
  elev_m, air_tmax, air_tmin, radiation, rainfall, rh_tmax, rh_tmin
)
training_data <- model_data[training_indices, ]
testing_data <- model_data[-training_indices, ]
```

```{r}
library(randomForest)
rfmodel <- randomForest(new_cause ~ ., data = training_data, mtry = 7)
```

```{r}
rfmodel
```


Evaluating on testing dataset

```{r}
test_preds <- predict(rfmodel, testing_data)
test_origs <- testing_data$new_cause
library(MLmetrics)
print(ConfusionMatrix(test_preds, test_origs))
print(Accuracy(test_preds, test_origs)) # 0.72
print(F1_Score(test_preds, test_origs)) # 0.83
print(AUC(test_preds, test_origs)) # NaN
```

```{r}
test_data_w_preds <- testing_data |> mutate(preds = test_preds)
test_data_w_preds |> count(new_cause, preds) # selecting the ones where lightning was predicted as accidental human
```

```{r}
set.seed(123)
interest_points <- test_data_w_preds |> filter(new_cause == "lightning", preds == "accidental_human") |> mutate(ind = row_number())
```

```{r}
# list(data = data, model = rfmodel) -> state
# saveRDS(state, "cf_final_state.rds")
```

# validate ewhether cf is working 

```{r}
library(counterfactuals)
library(iml)
predictor = Predictor$new(rfmodel, type = "prob")
```

```{r}
# x_interest <- training[1, ]
# predictor$predict(x_interest)
```


```{r}
moc_classif = MOCClassif$new(
  predictor,
  fixed_features = c("X", "Y", "elev_m"),
  epsilon = 0.1, # candidates less than 0.7 are penalized,
  k = 5L,
  # mu = 50,
  # termination_crit = "genstag", # stop if candidates arent improving for n_generation amount
  # n_generations = 200L,
  quiet = TRUE)
```

```{r}
find_cf <- function(inst, progress_bar) {
  library(randomForest)
  progress_bar()
  cfactuals = moc_classif$find_counterfactuals(
      inst, desired_class = "lightning", desired_prob = c(0.85, 1)
    )
  return(cfactuals$data |> mutate(X = inst$X, Y = inst$Y, ind = inst$ind, .before = 1))
}

interest_points_t <- split(interest_points, seq(nrow(interest_points)))
library(furrr)
library(progressr)
plan(multisession, workers = 4) 
with_progress({
  p <- progressor(steps = nrow(interest_points))
  cf_vals <- future_map_dfr(interest_points_t, find_cf, progress_bar = p)
})
```


```{r}
saveRDS(cf_vals, "cf_vals_attempt_3.rds")
```